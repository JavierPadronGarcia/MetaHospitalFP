{"version":3,"file":"stream-converter.js","names":["jconv","StreamConverter","inner","options","innerEncoding","toUpperCase","outerEncoding","innerBOM","outerBOM","writeStarted","data","Buffer","from","convert","event","handler","addListener","removeListener","encoding","callback","Function","undefined","write","length","bomless","alloc","copy","convertInwards","destination","reverseConverter","pipe","close","type","on","chunk","convertOutwards","once","end","value","emit","module","exports"],"sources":["../../../lib/csv/stream-converter.js"],"sourcesContent":["// =======================================================================================================\n// StreamConverter\n//\n// convert between encoding schemes in a stream\n// Work in Progress - Will complete this at some point\nlet jconv;\n\nclass StreamConverter {\n  constructor(inner, options) {\n    this.inner = inner;\n\n    options = options || {};\n    this.innerEncoding = (options.innerEncoding || 'UTF8').toUpperCase();\n    this.outerEncoding = (options.outerEncoding || 'UTF8').toUpperCase();\n\n    this.innerBOM = options.innerBOM || null;\n    this.outerBOM = options.outerBOM || null;\n\n    this.writeStarted = false;\n  }\n\n  convertInwards(data) {\n    if (data) {\n      if (typeof data === 'string') {\n        data = Buffer.from(data, this.outerEncoding);\n      }\n\n      if (this.innerEncoding !== this.outerEncoding) {\n        data = jconv.convert(data, this.outerEncoding, this.innerEncoding);\n      }\n    }\n\n    return data;\n  }\n\n  convertOutwards(data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(data, this.innerEncoding);\n    }\n\n    if (this.innerEncoding !== this.outerEncoding) {\n      data = jconv.convert(data, this.innerEncoding, this.outerEncoding);\n    }\n    return data;\n  }\n\n  addListener(event, handler) {\n    this.inner.addListener(event, handler);\n  }\n\n  removeListener(event, handler) {\n    this.inner.removeListener(event, handler);\n  }\n\n  write(data, encoding, callback) {\n    if (encoding instanceof Function) {\n      callback = encoding;\n      encoding = undefined;\n    }\n\n    if (!this.writeStarted) {\n      // if inner encoding has BOM, write it now\n      if (this.innerBOM) {\n        this.inner.write(this.innerBOM);\n      }\n\n      // if outer encoding has BOM, delete it now\n      if (this.outerBOM) {\n        if (data.length <= this.outerBOM.length) {\n          if (callback) {\n            callback();\n          }\n          return;\n        }\n        const bomless = Buffer.alloc(data.length - this.outerBOM.length);\n        data.copy(bomless, 0, this.outerBOM.length, data.length);\n        data = bomless;\n      }\n\n      this.writeStarted = true;\n    }\n\n    this.inner.write(this.convertInwards(data), encoding ? this.innerEncoding : undefined, callback);\n  }\n\n  read() {\n    // TBD\n  }\n\n  pipe(destination, options) {\n    const reverseConverter = new StreamConverter(destination, {\n      innerEncoding: this.outerEncoding,\n      outerEncoding: this.innerEncoding,\n      innerBOM: this.outerBOM,\n      outerBOM: this.innerBOM,\n    });\n\n    this.inner.pipe(\n      reverseConverter,\n      options\n    );\n  }\n\n  close() {\n    this.inner.close();\n  }\n\n  on(type, callback) {\n    switch (type) {\n      case 'data':\n        this.inner.on('data', chunk => {\n          callback(this.convertOutwards(chunk));\n        });\n        return this;\n      default:\n        this.inner.on(type, callback);\n        return this;\n    }\n  }\n\n  once(type, callback) {\n    this.inner.once(type, callback);\n  }\n\n  end(chunk, encoding, callback) {\n    this.inner.end(this.convertInwards(chunk), this.innerEncoding, callback);\n  }\n\n  emit(type, value) {\n    this.inner.emit(type, value);\n  }\n}\n\nmodule.exports = StreamConverter;\n"],"mappings":"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"}