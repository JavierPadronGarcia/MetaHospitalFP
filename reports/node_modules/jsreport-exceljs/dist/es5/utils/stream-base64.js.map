{"version":3,"file":"stream-base64.js","names":["Stream","require","StreamBase64","pipes","encoding","destination","push","filter","pipe","Error","Duplex","module","exports"],"sources":["../../../lib/utils/stream-base64.js"],"sourcesContent":["const Stream = require('stream');\n\n// =============================================================================\n// StreamBase64 - A utility to convert to/from base64 stream\n// Note: does not buffer data, must be piped\nclass StreamBase64 extends Stream.Duplex {\n  constructor() {\n    super();\n\n    // consuming pipe streams go here\n    this.pipes = [];\n  }\n\n  // writable\n  // event drain - if write returns false (which it won't), indicates when safe to write again.\n  // finish - end() has been called\n  // pipe(src) - pipe() has been called on readable\n  // unpipe(src) - unpipe() has been called on readable\n  // error - duh\n\n  write(/* data, encoding */) {\n    return true;\n  }\n\n  cork() {}\n\n  uncork() {}\n\n  end(/* chunk, encoding, callback */) {}\n\n  // readable\n  // event readable - some data is now available\n  // event data - switch to flowing mode - feeds chunks to handler\n  // event end - no more data\n  // event close - optional, indicates upstream close\n  // event error - duh\n  read(/* size */) {}\n\n  setEncoding(encoding) {\n    // causes stream.read or stream.on('data) to return strings of encoding instead of Buffer objects\n    this.encoding = encoding;\n  }\n\n  pause() {}\n\n  resume() {}\n\n  isPaused() {}\n\n  pipe(destination) {\n    // add destination to pipe list & write current buffer\n    this.pipes.push(destination);\n  }\n\n  unpipe(destination) {\n    // remove destination from pipe list\n    this.pipes = this.pipes.filter(pipe => pipe !== destination);\n  }\n\n  unshift(/* chunk */) {\n    // some numpty has read some data that's not for them and they want to put it back!\n    // Might implement this some day\n    throw new Error('Not Implemented');\n  }\n\n  wrap(/* stream */) {\n    // not implemented\n    throw new Error('Not Implemented');\n  }\n}\n\nmodule.exports = StreamBase64;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB,C,CAEA;AACA;AACA;;;IACMC,Y;;;;;EACJ,wBAAc;IAAA;;IAAA;;IACZ,0BADY,CAGZ;;IACA,MAAKC,KAAL,GAAa,EAAb;IAJY;EAKb,C,CAED;EACA;EACA;EACA;EACA;EACA;;;;;WAEA;MAAM;IAAN,QAA4B;MAC1B,OAAO,IAAP;IACD;;;WAED,gBAAO,CAAE;;;WAET,kBAAS,CAAE;;;WAEX;MAAI;IAAJ,MAAqC,CAAE,C,CAEvC;IACA;IACA;IACA;IACA;IACA;;;;WACA;MAAK;IAAL,OAAiB,CAAE;;;WAEnB,qBAAYC,QAAZ,EAAsB;MACpB;MACA,KAAKA,QAAL,GAAgBA,QAAhB;IACD;;;WAED,iBAAQ,CAAE;;;WAEV,kBAAS,CAAE;;;WAEX,oBAAW,CAAE;;;WAEb,cAAKC,WAAL,EAAkB;MAChB;MACA,KAAKF,KAAL,CAAWG,IAAX,CAAgBD,WAAhB;IACD;;;WAED,gBAAOA,WAAP,EAAoB;MAClB;MACA,KAAKF,KAAL,GAAa,KAAKA,KAAL,CAAWI,MAAX,CAAkB,UAAAC,IAAI;QAAA,OAAIA,IAAI,KAAKH,WAAb;MAAA,CAAtB,CAAb;IACD;;;WAED;MAAQ;IAAR,UAAqB;MACnB;MACA;MACA,MAAM,IAAII,KAAJ,CAAU,iBAAV,CAAN;IACD;;;WAED;MAAK;IAAL,OAAmB;MACjB;MACA,MAAM,IAAIA,KAAJ,CAAU,iBAAV,CAAN;IACD;;;;EA/DwBT,MAAM,CAACU,M;;AAkElCC,MAAM,CAACC,OAAP,GAAiBV,YAAjB"}