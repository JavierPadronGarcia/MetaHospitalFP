{"version":3,"file":"col-cache.js","names":["colCache","_dictionary","_l2n","_n2l","_level","n","_fill","level","c","v","l1","l2","l3","Math","floor","l2n","l","length","Error","n2l","_hash","validateAddress","value","match","decodeAddress","addr","matchCol","col","colNumber","matchRow","row","rowNumber","parseInt","address","$col$row","getAddress","r","decode","parts","split","tl","br","result","top","min","left","bottom","max","right","dimensions","decodeEx","groups","sheetName","reference","startsWith","error","encodeAddress","encode","arguments","inRange","range","module","exports"],"sources":["../../../lib/utils/col-cache.js"],"sourcesContent":["// =========================================================================\n// Column Letter to Number conversion\nconst colCache = {\n  _dictionary: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n  _l2n: {},\n  _n2l: [],\n  _level(n) {\n    if (n <= 26) {\n      return 1;\n    }\n    if (n <= 26 * 26) {\n      return 2;\n    }\n    return 3;\n  },\n  _fill(level) {\n    let c;\n    let v;\n    let l1;\n    let l2;\n    let l3;\n    let n = 1;\n    if (level >= 1) {\n      while (n <= 26) {\n        c = this._dictionary[n - 1];\n        this._n2l[n] = c;\n        this._l2n[c] = n;\n        n++;\n      }\n    }\n    if (level >= 2) {\n      while (n <= 26 + (26 * 26)) {\n        v = n - (26 + 1);\n        l1 = v % 26;\n        l2 = Math.floor(v / 26);\n        c = this._dictionary[l2] + this._dictionary[l1];\n        this._n2l[n] = c;\n        this._l2n[c] = n;\n        n++;\n      }\n    }\n    if (level >= 3) {\n      while (n <= 16384) {\n        v = n - ((26 * 26) + 26 + 1);\n        l1 = v % 26;\n        l2 = Math.floor(v / 26) % 26;\n        l3 = Math.floor(v / (26 * 26));\n        c = this._dictionary[l3] + this._dictionary[l2] + this._dictionary[l1];\n        this._n2l[n] = c;\n        this._l2n[c] = n;\n        n++;\n      }\n    }\n  },\n  l2n(l) {\n    if (!this._l2n[l]) {\n      this._fill(l.length);\n    }\n    if (!this._l2n[l]) {\n      throw new Error(`Out of bounds. Invalid column letter: ${l}`);\n    }\n    return this._l2n[l];\n  },\n  n2l(n) {\n    if (n < 1 || n > 16384) {\n      throw new Error(`${n} is out of bounds. Excel supports columns from 1 to 16384`);\n    }\n    if (!this._n2l[n]) {\n      this._fill(this._level(n));\n    }\n    return this._n2l[n];\n  },\n\n  // =========================================================================\n  // Address processing\n  _hash: {},\n\n  // check if value looks like an address\n  validateAddress(value) {\n    if (!value.match(/^[A-Z]+\\d+$/)) {\n      throw new Error(`Invalid Address: ${value}`);\n    }\n    return true;\n  },\n\n  // convert address string into structure\n  decodeAddress(value) {\n    const addr = this._hash[value];\n    if (addr) {\n      return addr;\n    }\n    const matchCol = value.match(/[A-Z]+/);\n    let col;\n    let colNumber;\n    if (matchCol) {\n      col = matchCol[0];\n      colNumber = this.l2n(col);\n    }\n    const matchRow = value.match(/\\d+/);\n    let row;\n    let rowNumber;\n    if (matchRow) {\n      row = matchRow[0];\n      rowNumber = parseInt(row, 10);\n    }\n\n    // in case $row$col\n    value = (col || '') + (row || '');\n\n    const address = {\n      address: value,\n      col: colNumber,\n      row: rowNumber,\n      $col$row: `$${col || ''}$${row || ''}`,\n    };\n\n    // mem fix - cache only the tl 100x100 square\n    if (colNumber <= 100 && rowNumber <= 100) {\n      this._hash[value] = address;\n      this._hash[address.$col$row] = address;\n    }\n\n    return address;\n  },\n\n  // convert r,c into structure (if only 1 arg, assume r is address string)\n  getAddress(r, c) {\n    if (c) {\n      const address = this.n2l(c) + r;\n      return this.decodeAddress(address);\n    }\n    return this.decodeAddress(r);\n  },\n\n  // convert [address], [tl:br] into address structures\n  decode(value) {\n    const parts = value.split(':');\n    if (parts.length === 2) {\n      const tl = this.decodeAddress(parts[0]);\n      const br = this.decodeAddress(parts[1]);\n      const result = {\n        top: Math.min(tl.row, br.row),\n        left: Math.min(tl.col, br.col),\n        bottom: Math.max(tl.row, br.row),\n        right: Math.max(tl.col, br.col),\n      };\n      // reconstruct tl, br and dimensions\n      result.tl = this.n2l(result.left) + result.top;\n      result.br = this.n2l(result.right) + result.bottom;\n      result.dimensions = `${result.tl}:${result.br}`;\n      return result;\n    }\n    return this.decodeAddress(value);\n  },\n\n  // convert [sheetName!][$]col[$]row[[$]col[$]row] into address or range structures\n  decodeEx(value) {\n    const groups = value.match(/(?:(?:(?:'((?:[^']|'')*)')|([^'^ !]*))!)?(.*)/);\n\n    const sheetName = groups[1] || groups[2]; // Qouted and unqouted groups\n    const reference = groups[3]; // Remaining address\n\n    const parts = reference.split(':');\n    if (parts.length > 1) {\n      let tl = this.decodeAddress(parts[0]);\n      let br = this.decodeAddress(parts[1]);\n      const top = Math.min(tl.row, br.row);\n      const left = Math.min(tl.col, br.col);\n      const bottom = Math.max(tl.row, br.row);\n      const right = Math.max(tl.col, br.col);\n\n      tl = this.n2l(left) + top;\n      br = this.n2l(right) + bottom;\n\n      return {\n        top,\n        left,\n        bottom,\n        right,\n        sheetName,\n        tl: {address: tl, col: left, row: top, $col$row: `$${this.n2l(left)}$${top}`, sheetName},\n        br: {address: br, col: right, row: bottom, $col$row: `$${this.n2l(right)}$${bottom}`, sheetName},\n        dimensions: `${tl}:${br}`,\n      };\n    }\n    if (reference.startsWith('#')) {\n      return sheetName ? {sheetName, error: reference} : {error: reference};\n    }\n\n    const address = this.decodeAddress(reference);\n    return sheetName ? {sheetName, ...address} : address;\n  },\n\n  // convert row,col into address string\n  encodeAddress(row, col) {\n    return colCache.n2l(col) + row;\n  },\n\n  // convert row,col into string address or t,l,b,r into range\n  encode() {\n    switch (arguments.length) {\n      case 2:\n        return colCache.encodeAddress(arguments[0], arguments[1]);\n      case 4:\n        return `${colCache.encodeAddress(arguments[0], arguments[1])}:${colCache.encodeAddress(arguments[2], arguments[3])}`;\n      default:\n        throw new Error('Can only encode with 2 or 4 arguments');\n    }\n  },\n\n  // return true if address is contained within range\n  inRange(range, address) {\n    const [left,top,,right,bottom] = range;\n    const [col, row] = address;\n    return (\n      (col >= left) &&\n      (col <= right) &&\n      (row >= top) &&\n      (row <= bottom)\n    );\n  },\n};\n\nmodule.exports = colCache;\n"],"mappings":"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"}