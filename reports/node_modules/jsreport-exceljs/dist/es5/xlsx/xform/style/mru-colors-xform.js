"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BaseXform = require('../base-xform'); // <mruColors>
//  <color rgb="[rgb]"/>
//  <color rgb="[rgb]"/>
//  <color rgb="[rgb]"/>
//  <color rgb="[rgb]"/>
//  <color rgb="[rgb]"/>
//  <color rgb="[rgb]"/>
//  <color rgb="[rgb]"/>
//  <color rgb="[rgb]"/>
// </mruColors>
// Style assists translation from style model to/from xlsx


var MruColorsXform = /*#__PURE__*/function (_BaseXform) {
  _inherits(MruColorsXform, _BaseXform);

  var _super = _createSuper(MruColorsXform);

  function MruColorsXform(options) {
    _classCallCheck(this, MruColorsXform);

    return _super.call(this);
  }

  _createClass(MruColorsXform, [{
    key: "tag",
    get: function get() {
      return 'mruColors';
    }
  }, {
    key: "render",
    value: function render(xmlStream, model) {
      xmlStream.openNode('mruColors');
      model.colors.forEach(function (color) {
        xmlStream.openNode('color', {
          rgb: color.rgb
        });
        xmlStream.closeNode();
      });
      xmlStream.closeNode();
    }
  }, {
    key: "parseOpen",
    value: function parseOpen(node) {
      // used during sax parsing of xml to build object
      switch (node.name) {
        case 'mruColors':
          this.model = {
            colors: []
          };
          return true;

        case 'color':
          this.model.colors.push({
            rgb: node.attributes.rgb
          });
          return true;

        default:
          return false;
      }
    }
  }, {
    key: "parseText",
    value: function parseText() {}
  }, {
    key: "parseClose",
    value: function parseClose(name) {
      return name !== 'mruColors';
    }
  }]);

  return MruColorsXform;
}(BaseXform);

module.exports = MruColorsXform;
//# sourceMappingURL=mru-colors-xform.js.map
