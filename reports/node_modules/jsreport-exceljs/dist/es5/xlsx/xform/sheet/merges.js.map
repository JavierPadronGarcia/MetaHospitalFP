{"version":3,"file":"merges.js","names":["_","require","Range","colCache","Enums","Merges","merges","merge","master","expandToAddress","address","range","map","mergeCells","rows","each","dimensions","decode","i","top","bottom","row","j","left","right","cell","cells","type","ValueType","Null","encodeAddress","Merge","tl","hash","module","exports"],"sources":["../../../../../lib/xlsx/xform/sheet/merges.js"],"sourcesContent":["const _ = require('../../../utils/under-dash');\n\nconst Range = require('../../../doc/range');\nconst colCache = require('../../../utils/col-cache');\nconst Enums = require('../../../doc/enums');\n\nclass Merges {\n  constructor() {\n    // optional mergeCells is array of ranges (like the xml)\n    this.merges = {};\n  }\n\n  add(merge) {\n    // merge is {address, master}\n    if (this.merges[merge.master]) {\n      this.merges[merge.master].expandToAddress(merge.address);\n    } else {\n      const range = `${merge.master}:${merge.address}`;\n      this.merges[merge.master] = new Range(range);\n    }\n  }\n\n  get mergeCells() {\n    return _.map(this.merges, merge => merge.range);\n  }\n\n  reconcile(mergeCells, rows) {\n    // reconcile merge list with merge cells\n    _.each(mergeCells, merge => {\n      const dimensions = colCache.decode(merge);\n      for (let i = dimensions.top; i <= dimensions.bottom; i++) {\n        const row = rows[i - 1];\n        for (let j = dimensions.left; j <= dimensions.right; j++) {\n          const cell = row.cells[j - 1];\n          if (!cell) {\n            // nulls are not included in document - so if master cell has no value - add a null one here\n            row.cells[j] = {\n              type: Enums.ValueType.Null,\n              address: colCache.encodeAddress(i, j),\n            };\n          } else if (cell.type === Enums.ValueType.Merge) {\n            cell.master = dimensions.tl;\n          }\n        }\n      }\n    });\n  }\n\n  getMasterAddress(address) {\n    // if address has been merged, return its master's address. Assumes reconcile has been called\n    const range = this.hash[address];\n    return range && range.tl;\n  }\n}\n\nmodule.exports = Merges;\n"],"mappings":";;;;;;;;AAAA,IAAMA,CAAC,GAAGC,OAAO,CAAC,2BAAD,CAAjB;;AAEA,IAAMC,KAAK,GAAGD,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,oBAAD,CAArB;;IAEMI,M;EACJ,kBAAc;IAAA;;IACZ;IACA,KAAKC,MAAL,GAAc,EAAd;EACD;;;;WAED,aAAIC,KAAJ,EAAW;MACT;MACA,IAAI,KAAKD,MAAL,CAAYC,KAAK,CAACC,MAAlB,CAAJ,EAA+B;QAC7B,KAAKF,MAAL,CAAYC,KAAK,CAACC,MAAlB,EAA0BC,eAA1B,CAA0CF,KAAK,CAACG,OAAhD;MACD,CAFD,MAEO;QACL,IAAMC,KAAK,aAAMJ,KAAK,CAACC,MAAZ,cAAsBD,KAAK,CAACG,OAA5B,CAAX;QACA,KAAKJ,MAAL,CAAYC,KAAK,CAACC,MAAlB,IAA4B,IAAIN,KAAJ,CAAUS,KAAV,CAA5B;MACD;IACF;;;SAED,eAAiB;MACf,OAAOX,CAAC,CAACY,GAAF,CAAM,KAAKN,MAAX,EAAmB,UAAAC,KAAK;QAAA,OAAIA,KAAK,CAACI,KAAV;MAAA,CAAxB,CAAP;IACD;;;WAED,mBAAUE,UAAV,EAAsBC,IAAtB,EAA4B;MAC1B;MACAd,CAAC,CAACe,IAAF,CAAOF,UAAP,EAAmB,UAAAN,KAAK,EAAI;QAC1B,IAAMS,UAAU,GAAGb,QAAQ,CAACc,MAAT,CAAgBV,KAAhB,CAAnB;;QACA,KAAK,IAAIW,CAAC,GAAGF,UAAU,CAACG,GAAxB,EAA6BD,CAAC,IAAIF,UAAU,CAACI,MAA7C,EAAqDF,CAAC,EAAtD,EAA0D;UACxD,IAAMG,GAAG,GAAGP,IAAI,CAACI,CAAC,GAAG,CAAL,CAAhB;;UACA,KAAK,IAAII,CAAC,GAAGN,UAAU,CAACO,IAAxB,EAA8BD,CAAC,IAAIN,UAAU,CAACQ,KAA9C,EAAqDF,CAAC,EAAtD,EAA0D;YACxD,IAAMG,IAAI,GAAGJ,GAAG,CAACK,KAAJ,CAAUJ,CAAC,GAAG,CAAd,CAAb;;YACA,IAAI,CAACG,IAAL,EAAW;cACT;cACAJ,GAAG,CAACK,KAAJ,CAAUJ,CAAV,IAAe;gBACbK,IAAI,EAAEvB,KAAK,CAACwB,SAAN,CAAgBC,IADT;gBAEbnB,OAAO,EAAEP,QAAQ,CAAC2B,aAAT,CAAuBZ,CAAvB,EAA0BI,CAA1B;cAFI,CAAf;YAID,CAND,MAMO,IAAIG,IAAI,CAACE,IAAL,KAAcvB,KAAK,CAACwB,SAAN,CAAgBG,KAAlC,EAAyC;cAC9CN,IAAI,CAACjB,MAAL,GAAcQ,UAAU,CAACgB,EAAzB;YACD;UACF;QACF;MACF,CAjBD;IAkBD;;;WAED,0BAAiBtB,OAAjB,EAA0B;MACxB;MACA,IAAMC,KAAK,GAAG,KAAKsB,IAAL,CAAUvB,OAAV,CAAd;MACA,OAAOC,KAAK,IAAIA,KAAK,CAACqB,EAAtB;IACD;;;;;;AAGHE,MAAM,CAACC,OAAP,GAAiB9B,MAAjB"}