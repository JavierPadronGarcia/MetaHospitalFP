function e(){return e=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},e.apply(this,arguments)}var t,n,o="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},r=(t=function(e,t){!function(){function t(e,t,n){var o=new XMLHttpRequest;o.open("GET",e),o.responseType="blob",o.onload=function(){a(o.response,t,n)},o.onerror=function(){console.error("could not download file")},o.send()}function n(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return 200<=t.status&&299>=t.status}function r(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(n){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var s="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof o&&o.global===o?o:void 0,i=s.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),a=s.saveAs||("object"!=typeof window||window!==s?function(){}:"download"in HTMLAnchorElement.prototype&&!i?function(e,o,i){var a=s.URL||s.webkitURL,l=document.createElement("a");l.download=o=o||e.name||"download",l.rel="noopener","string"==typeof e?(l.href=e,l.origin===location.origin?r(l):n(l.href)?t(e,o,i):r(l,l.target="_blank")):(l.href=a.createObjectURL(e),setTimeout(function(){a.revokeObjectURL(l.href)},4e4),setTimeout(function(){r(l)},0))}:"msSaveOrOpenBlob"in navigator?function(e,o,s){if(o=o||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(function(e,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e}(e,s),o);else if(n(e))t(e,o,s);else{var i=document.createElement("a");i.href=e,i.target="_blank",setTimeout(function(){r(i)})}}:function(e,n,o,r){if((r=r||open("","_blank"))&&(r.document.title=r.document.body.innerText="downloading..."),"string"==typeof e)return t(e,n,o);var a="application/octet-stream"===e.type,l=/constructor/i.test(s.HTMLElement)||s.safari,c=/CriOS\/[\d]+/.test(navigator.userAgent);if((c||a&&l||i)&&"undefined"!=typeof FileReader){var p=new FileReader;p.onloadend=function(){var e=p.result;e=c?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),r?r.location.href=e:location=e,r=null},p.readAsDataURL(e)}else{var u=s.URL||s.webkitURL,d=u.createObjectURL(e);r?r.location=d:location.href=d,r=null,setTimeout(function(){u.revokeObjectURL(d)},4e4)}});s.saveAs=a.saveAs=a,e.exports=a}()},t(n={exports:{}}),n.exports);class s{constructor(e){this._response=e}get response(){return this._response}async toString(){return(await this.response.blob()).text()}async download(e){const t=await this.response.blob();r.saveAs(t,e)}async toBlob(){return this.response.blob()}async toDataURI(){const e=new FileReader,t=await this.response.blob();return new Promise(n=>{e.onload=function(t){n(e.result)},e.readAsDataURL(t)})}async openInWindow({cleanInterval:e=5e3,windowName:t,windowFeatures:n,title:o}={}){const r=await this.response.blob(),s=URL.createObjectURL(r,t,n),i=window.URL.createObjectURL(new Blob([`\n    <html>\n      <head>\n        <title>${o||"report"}</title>\n        <style>\n          html, body {\n            margin: 0px;\n            width: 100%;\n            height: 100%;\n          }\n        </style>\n      </head>\n      <body>\n        <iframe src="${s}" frameborder="0" width="100%" height="100%" />\n      </body>\n    </html>\n  `],{type:"text/html"})),a=window.open(i),l=setInterval(()=>{a&&a.closed&&(URL.revokeObjectURL(s),URL.revokeObjectURL(i),clearInterval(l))},e);return a}async toObjectURL(){const e=await this.response.blob();return URL.createObjectURL(e)}}class i{constructor(){this.headers={}}_normalizeUrl(e,...t){const n=new URL(e),o=[];for(const e of t){let t=e;"/"===t[0]&&(t=t.slice(1)),"/"===t[t.length-1]&&(t=t.slice(0,-1)),""!==t&&o.push(t)}if(0===o.length)return n.toString();const r="/"===n.pathname[n.pathname.length-1]?n.pathname.slice(0,-1):n.pathname;return o.unshift(r),new URL(o.join("/"),n).toString()}async _jsreportRequest({method:t,path:n,body:o}){if(!this.serverUrl)throw new Error("The script was not linked from jsreport. You need to fill jsreport.serverUrl property with valid url to jsreport server.");const r=this._normalizeUrl(this.serverUrl,n);let s;try{s=await fetch(r,{headers:e({"Content-Type":"application/json"},this.headers),body:null!=o?JSON.stringify(o):null,method:t})}catch(e){throw new Error("Failed to connect to jsreport server.")}if(!s.ok){let t={message:`jsreport server responded with error. status text: ${s.statusText}, status code: ${s.status}`};try{const n=await s.blob(),o=await n.text(),r=JSON.parse(o);t=e({},r,{message:`${t.message}, details: ${r.message}`})}catch(e){}const n=new Error(t.message);throw Object.assign(n,{status:s.status,statusText:s.statusText,error:t}),n}return s}_submitFormRequest(e,t,n){const o=document.createElement("form");o.target=t,o.id=(new Date).getTime(),o.method="POST",o.action=this._normalizeUrl(this.serverUrl,"/api/report",encodeURIComponent(n));const r=document.createElement("input");r.type="hidden",r.name="renderRequestContent",r.value=JSON.stringify(e),o.appendChild(r),document.body.appendChild(o),function e(t){if(t>10)return console.log("Unable to submit render form.");try{o.submit(),o.outerHTML=""}catch(n){setTimeout(function(){e(t+1)},50)}}(0)}download(e,t){if(null==e||"string"!=typeof e||""===e.trim())throw new Error("jsreport.download requires filename parameter and must be a non empty string");const n=Object.assign({},t);n.options=Object.assign({},n.options),null==n.options["Content-Disposition"]&&(n.options["Content-Disposition"]=`attachment; filename="${e}"`),this._submitFormRequest(n,"_self",e)}openInWindow({title:e,filename:t}={},n){if(null==e||"string"!=typeof e||""===e.trim())throw new Error("jsreport.openInWindow requires title parameter and must be a non empty string");if(null==t||"string"!=typeof t||""===t.trim())throw new Error("jsreport.openInWindow requires filename parameter and must be a non empty string");const o=Object.assign({},n);t&&(o.options=Object.assign({},o.options),null==o.options["Content-Disposition"]&&(o.options["Content-Disposition"]=`inline; filename="${t}"`)),this._submitFormRequest(o,"_blank",e)}async render(e){const t=await this._jsreportRequest({method:"POST",path:"/api/report",body:e});return new s(t)}createClient(){return new i}}const a=new i;setTimeout(function(){void 0!==window.jsreportInit&&jsreportInit(a)},0);export{a as default};
//# sourceMappingURL=jsreport.modern.js.map
