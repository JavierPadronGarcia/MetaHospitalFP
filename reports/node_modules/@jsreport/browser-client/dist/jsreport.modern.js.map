{"version":3,"file":"jsreport.modern.js","sources":["../src/jsreport.js"],"sourcesContent":["/* globals jsreportInit */\nimport { saveAs } from 'file-saver'\n\nclass RenderResponse {\n  constructor (res) {\n    this._response = res\n  }\n\n  /**\n   * Return the fetch original response\n   */\n  get response () {\n    return this._response\n  }\n\n  /**\n   * Returns Promise<string> content of the response\n   * @returns {Promise<string>}\n   */\n  async toString () {\n    const blob = await this.response.blob()\n    return blob.text()\n  }\n\n  /**\n   * Invoke save of the output content as the file\n   * @param {string} afilename  - filename to save the file as\n   */\n  async download (afilename) {\n    const blob = await this.response.blob()\n    saveAs(blob, afilename)\n  }\n\n  /**\n   * Returns Promise<Blob> content of the response\n   * @returns {Promise<Blob>}\n   */\n  async toBlob () {\n    return this.response.blob()\n  }\n\n  /**\n   *  Return Promise<string> data URI of the response\n   * @returns {Promise<string>}\n   */\n  async toDataURI () {\n    const reader = new FileReader()\n    const blob = await this.response.blob()\n    return new Promise((resolve) => {\n      reader.onload = function (e) {\n        resolve(reader.result)\n      }\n      reader.readAsDataURL(blob)\n    })\n  }\n\n  /**\n   * Opens the response content in a new browser window\n   * @param {Object} options - optional configs passed to the window.open\n   * @param {string} options.windowName - name of the window\n   * @param {string} options.windowFeatures - features of the window\n   * @param {Number} options.cleanInterval - how often to check if the window is closed to clean up the object URL\n   * @param {Number} options.title - tab title name\n   * @returns {Promise<Window}\n   */\n  async openInWindow ({\n    cleanInterval = 5000,\n    windowName,\n    windowFeatures,\n    title\n  } = { }) {\n    const blob = await this.response.blob()\n    const objectURL = URL.createObjectURL(blob, windowName, windowFeatures)\n\n    const previewURL = window.URL.createObjectURL(new Blob([`\n    <html>\n      <head>\n        <title>${title || 'report'}</title>\n        <style>\n          html, body {\n            margin: 0px;\n            width: 100%;\n            height: 100%;\n          }\n        </style>\n      </head>\n      <body>\n        <iframe src=\"${objectURL}\" frameborder=\"0\" width=\"100%\" height=\"100%\" />\n      </body>\n    </html>\n  `], { type: 'text/html' }))\n\n    const w = window.open(previewURL)\n    const interval = setInterval(() => {\n      if (w && w.closed) {\n        URL.revokeObjectURL(objectURL)\n        URL.revokeObjectURL(previewURL)\n        clearInterval(interval)\n      }\n    }, cleanInterval)\n    return w\n  }\n\n  /**\n   * Return the response as object URL. Remember you need to revoke the object URL when you are done with it\n   * @returns {Promise<string>}\n   */\n  async toObjectURL () {\n    const blob = await this.response.blob()\n    return URL.createObjectURL(blob)\n  }\n}\n\nclass JsReportClient {\n  constructor () {\n    this.headers = {}\n  }\n\n  _normalizeUrl (baseUrl, ...paths) {\n    const rootUrl = new URL(baseUrl)\n    const normalizedPaths = []\n\n    for (const path of paths) {\n      let normalizedPath = path\n\n      if (normalizedPath[0] === '/') {\n        normalizedPath = normalizedPath.slice(1)\n      }\n\n      if (normalizedPath[normalizedPath.length - 1] === '/') {\n        normalizedPath = normalizedPath.slice(0, -1)\n      }\n\n      if (normalizedPath !== '') {\n        normalizedPaths.push(normalizedPath)\n      }\n    }\n\n    if (normalizedPaths.length === 0) {\n      return rootUrl.toString()\n    }\n\n    const normalizedOriginalPathname = rootUrl.pathname[rootUrl.pathname.length - 1] === '/' ? rootUrl.pathname.slice(0, -1) : rootUrl.pathname\n\n    normalizedPaths.unshift(normalizedOriginalPathname)\n\n    return new URL(normalizedPaths.join('/'), rootUrl).toString()\n  }\n\n  async _jsreportRequest ({ method, path, body }) {\n    if (!this.serverUrl) {\n      throw new Error('The script was not linked from jsreport. You need to fill jsreport.serverUrl property with valid url to jsreport server.')\n    }\n\n    const reportUrl = this._normalizeUrl(this.serverUrl, path)\n\n    let res\n    try {\n      res = await fetch(reportUrl, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.headers\n        },\n        body: body != null ? JSON.stringify(body) : null,\n        method\n      })\n    } catch (e) {\n      throw new Error('Failed to connect to jsreport server.')\n    }\n\n    if (!res.ok) {\n      let error = {\n        message: `jsreport server responded with error. status text: ${res.statusText}, status code: ${res.status}`\n      }\n      try {\n        const blob = await res.blob()\n        const text = await blob.text()\n        const remoteError = JSON.parse(text)\n        error = {\n          ...remoteError,\n          message: `${error.message}, details: ${remoteError.message}`\n        }\n      } catch (e) {\n\n      }\n      const returnError = new Error(error.message)\n      Object.assign(returnError, {\n        status: res.status,\n        statusText: res.statusText,\n        error\n      })\n      throw returnError\n    }\n\n    return res\n  }\n\n  _submitFormRequest (req, target, title) {\n    const mapForm = document.createElement('form')\n    mapForm.target = target\n    mapForm.id = new Date().getTime()\n    mapForm.method = 'POST'\n    mapForm.action = this._normalizeUrl(this.serverUrl, '/api/report', encodeURIComponent(title))\n\n    const input = document.createElement('input')\n    input.type = 'hidden'\n    input.name = 'renderRequestContent'\n    input.value = JSON.stringify(req)\n    mapForm.appendChild(input)\n    document.body.appendChild(mapForm)\n\n    function submit (i) {\n      if (i > 10) {\n        return console.log('Unable to submit render form.')\n      }\n      try {\n        mapForm.submit()\n        mapForm.outerHTML = ''\n      } catch (e) {\n        setTimeout(function () {\n          submit(i + 1)\n        }, 50)\n      }\n    }\n\n    submit(0)\n  }\n\n  /**\n   * Render report in remote server and initiate download\n   * This method doesn't support submitting to jsreport with authentication enabled\n   * @param {filename} new tab title\n   * @param {RenderRequest} renderRequest\n   */\n  download (filename, req) {\n    if (\n      filename == null ||\n      typeof filename !== 'string' ||\n      filename.trim() === ''\n    ) {\n      throw new Error('jsreport.download requires filename parameter and must be a non empty string')\n    }\n\n    const request = Object.assign({}, req)\n    request.options = Object.assign({}, request.options)\n    if (request.options['Content-Disposition'] == null) {\n      request.options['Content-Disposition'] = `attachment; filename=\"${filename}\"`\n    }\n    this._submitFormRequest(request, '_self', filename)\n  }\n\n  /**\n   * Render report in remote server and open in new tab\n   * This method doesn't support submitting to jsreport with authentication enabled\n   * @param {Object} options\n   * @param {string} options.filename\n   * @param {string} options.title\n   * @param {RenderRequest} renderRequest\n   */\n  openInWindow ({ title, filename } = {}, req) {\n    if (\n      title == null ||\n      typeof title !== 'string' ||\n      title.trim() === ''\n    ) {\n      throw new Error('jsreport.openInWindow requires title parameter and must be a non empty string')\n    }\n\n    if (\n      filename == null ||\n      typeof filename !== 'string' ||\n      filename.trim() === ''\n    ) {\n      throw new Error('jsreport.openInWindow requires filename parameter and must be a non empty string')\n    }\n\n    const request = Object.assign({}, req)\n    if (filename) {\n      request.options = Object.assign({}, request.options)\n      if (request.options['Content-Disposition'] == null) {\n        request.options['Content-Disposition'] = `inline; filename=\"${filename}\"`\n      }\n    }\n\n    this._submitFormRequest(request, '_blank', title)\n  }\n\n  /**\n   * Render report in remote server\n   * @param {RenderRequest} renderRequest\n   * @returns {Promise<RenderResponse>}\n   */\n  async render (renderRequest) {\n    const res = await this._jsreportRequest({ method: 'POST', path: '/api/report', body: renderRequest })\n    return new RenderResponse(res)\n  }\n\n  /**\n   * Create new instance of the client, this is rarely needed and you can use the default in the most of the cases\n   * @returns {JsReportClient}\n   */\n  createClient () {\n    return new JsReportClient()\n  }\n}\n\nconst jsreportInstance = new JsReportClient()\nsetTimeout(function () {\n  if (window.jsreportInit !== undefined) {\n    jsreportInit(jsreportInstance)\n  }\n}, 0)\n\nexport default jsreportInstance\n"],"names":["RenderResponse","constructor","res","this","_response","async","response","blob","text","afilename","saveAs","reader","FileReader","Promise","resolve","onload","e","result","readAsDataURL","cleanInterval","windowName","windowFeatures","title","URL","createObjectURL","previewURL","window","Blob","objectURL","type","w","open","interval","setInterval","closed","revokeObjectURL","clearInterval","JsReportClient","headers","_normalizeUrl","baseUrl","paths","rootUrl","normalizedPaths","normalizedPath","path","slice","length","push","toString","normalizedOriginalPathname","pathname","unshift","join","method","body","serverUrl","Error","fetch","reportUrl","_extends","JSON","stringify","ok","message","statusText","status","remoteError","parse","error","returnError","Object","assign","_submitFormRequest","req","target","mapForm","document","createElement","id","Date","getTime","action","encodeURIComponent","input","name","value","appendChild","submit","i","console","log","outerHTML","setTimeout","download","filename","trim","request","options","openInWindow","renderRequest","_jsreportRequest","createClient","jsreportInstance","undefined","jsreportInit"],"mappings":"g1FAGA,MAAMA,EACJC,YAAaC,GACXC,KAAKC,UAAYF,iBAOjB,OAAYE,KAAAA,UAOAC,iBAEZ,kBADwBC,SAASC,QACrBC,OAOAH,eAAEI,GACd,MAAMF,QAAaJ,KAAKG,SAASC,OACjCG,EAAAA,OAAOH,EAAME,GAOHJ,eACV,OAAOF,KAAKG,SAASC,OAORF,kBACb,MAAYM,EAAG,IAAfC,WACUL,QAASJ,KAAKG,SAASC,OACjC,WAAOM,QAAaC,IAClBH,EAAOI,OAAS,SAAUC,GACxBF,EAAQH,EAAOM,SAEjBN,EAAOO,cAAcX,KAaPF,oBAAEc,cAClBA,EAAgB,IADEC,WAElBA,EAFkBC,eAGlBA,EAHkBC,MAIlBA,GACE,IACF,MAAMf,QAAaJ,KAAKG,SAASC,SACfgB,IAAIC,gBAAgBjB,EAAMa,EAAYC,GAElDI,EAAaC,OAAOH,IAAIC,gBAAgB,IAAIG,KAAK,CAAE,8CAG5CL,GAAS,8NAUHM,oFAGjB,CAAEC,KAAM,eAEJC,EAAIJ,OAAOK,KAAKN,GAChBO,EAAWC,YAAY,KACvBH,GAAKA,EAAEI,SACTX,IAAIY,gBAAgBP,GACpBL,IAAIY,gBAAgBV,GACpBW,cAAcJ,KAEfb,GACH,OAAOW,EAOQzB,oBACf,MAAME,aAAkBD,SAASC,OACjC,WAAWiB,gBAAgBjB,IAI/B,MAAM8B,EACJpC,cACEE,KAAKmC,QAAU,GAGjBC,cAAeC,KAAYC,GACzB,MAAaC,EAAG,IAAInB,IAAIiB,GACHG,EAAG,GAExB,IAAK,WAAcF,EAAO,CACxB,IAAIG,EAAiBC,EAEK,MAAtBD,EAAe,KACjBA,EAAiBA,EAAeE,MAAM,IAGU,MAA9CF,EAAeA,EAAeG,OAAS,KACzCH,EAAiBA,EAAeE,MAAM,GAAI,IAGrB,KAAnBF,GACFD,EAAgBK,KAAKJ,GAIzB,GAA+B,IAA3BD,EAAgBI,OAClB,OAAOL,EAAQO,WAGjB,MAAgCC,EAAqD,MAAlDR,EAAQS,SAAST,EAAQS,SAASJ,OAAS,GAAaL,EAAQS,SAASL,MAAM,GAAI,GAAKJ,EAAQS,SAInI,OAFAR,EAAgBS,QAAQF,GAEb3B,IAAAA,IAAIoB,EAAgBU,KAAK,KAAMX,GAASO,WAG/B5C,wBAAEiD,OAAEA,EAAFT,KAAUA,EAAVU,KAAgBA,IACtC,IAAKpD,KAAKqD,UACR,UAAMC,MAAU,4HAGlB,QAAkBtD,KAAKoC,cAAcpC,KAAKqD,UAAWX,GAErD,IAAA3C,EACA,IACEA,QAAiBwD,MAACC,EAAW,CAC3BrB,QAAOsB,EAAA,CACL,eAAgB,oBACbzD,KAAKmC,SAEViB,KAAc,MAARA,EAAeM,KAAKC,UAAUP,GAAQ,KAC5CD,WAEF,MAAOtC,GACP,UAAMyC,MAAU,yCAGlB,IAAKvD,EAAI6D,GAAI,CACX,MAAY,CACVC,QAAU,sDAAqD9D,EAAI+D,4BAA4B/D,EAAIgE,UAErG,IACE,MAAU3D,QAAYL,EAACK,eACAA,EAACC,OACP2D,EAAGN,KAAKO,MAAM5D,GAC/B6D,EAAKT,EAAA,GACAO,EADA,CAEHH,QAAU,GAAEK,EAAML,qBAAqBG,EAAYH,YAErD,MAAOhD,IAGT,MAAiBsD,EAAG,IAAAb,MAAUY,EAAML,SAMpC,MALAO,OAAOC,OAAOF,EAAa,CACzBJ,OAAQhE,EAAIgE,OACZD,WAAY/D,EAAI+D,WAChBI,UAEIC,EAGR,OACDpE,EAEDuE,mBAAoBC,EAAKC,EAAQrD,GAC/B,MAAasD,EAAGC,SAASC,cAAc,QACvCF,EAAQD,OAASA,EACjBC,EAAQG,IAAK,IAAIC,MAAOC,UACxBL,EAAQtB,OAAS,OACjBsB,EAAQM,OAAS/E,KAAKoC,cAAcpC,KAAKqD,UAAW,cAAe2B,mBAAmB7D,IAEtF,MAAM8D,EAAQP,SAASC,cAAc,SACrCM,EAAMvD,KAAO,SACbuD,EAAMC,KAAO,uBACbD,EAAME,MAAQzB,KAAKC,UAAUY,GAC7BE,EAAQW,YAAYH,GACpBP,SAAStB,KAAKgC,YAAYX,GAE1B,SAAAY,EAAiBC,GACf,GAAIA,EAAI,GACN,OAAOC,QAAQC,IAAI,iCAErB,IACEf,EAAQY,SACRZ,EAAQgB,UAAY,GACpB,MAAO5E,GACP6E,WAAW,WACTL,EAAOC,EAAI,IACV,KAIPD,CAAO,GASTM,SAAUC,EAAUrB,GAClB,GACc,MAAZqB,GACoB,iBAAbA,GACa,KAApBA,EAASC,OAET,MAAM,IAAAvC,MAAU,gFAGlB,MAAMwC,EAAU1B,OAAOC,OAAO,GAAIE,GAClCuB,EAAQC,QAAU3B,OAAOC,OAAO,GAAIyB,EAAQC,SACE,MAA1CD,EAAQC,QAAQ,yBAClBD,EAAQC,QAAQ,uBAA0B,yBAAwBH,MAEpE5F,KAAKsE,mBAAmBwB,EAAS,QAASF,GAW5CI,cAAc7E,MAAEA,EAAFyE,SAASA,GAAa,GAAIrB,GACtC,GACW,MAATpD,GACiB,oBACA,KAAjBA,EAAM0E,OAEN,MAAUvC,IAAAA,MAAM,iFAGlB,GACc,MAAZsC,GACoB,iBAApBA,GACoB,KAApBA,EAASC,OAET,MAAUvC,IAAAA,MAAM,oFAGlB,MAAawC,EAAG1B,OAAOC,OAAO,GAAIE,GAC9BqB,IACFE,EAAQC,QAAU3B,OAAOC,OAAO,GAAIyB,EAAQC,SACE,MAA1CD,EAAQC,QAAQ,yBAClBD,EAAQC,QAAQ,uBAA0B,qBAAoBH,OAIlE5F,KAAKsE,mBAAmBwB,EAAS,SAAU3E,GAQjCjB,aAAE+F,GACZ,MAASlG,QAASC,KAAKkG,iBAAiB,CAAE/C,OAAQ,OAAQT,KAAM,cAAeU,KAAM6C,IACrF,OAAWpG,IAAAA,EAAeE,GAO5BoG,eACE,OAAWjE,IAAAA,GAITkE,MAAAA,EAAmB,IAAIlE,EAC7BwD,WAAW,gBACmBW,IAAxB9E,OAAO+E,cACTA,aAAaF,IAEd"}